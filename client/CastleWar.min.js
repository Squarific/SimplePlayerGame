function CastleWar (container) {
	this.container = container;
	this.setPlayerList();
}

// Set a list
// list = {
//     me: {name: string, x: number, y: number}
//     playerId1: {name: string, x: number, y: number},
//     playerId2: {name: string, x: number, y: number},
// ...}

CastleWar.prototype.setPlayerList = function setPlayerList (list) {
	this.players = {};

	for (var playerId in list)
		this.players[playerId] = new Player(list[playerId]);

	if (!this.players["me"]) this.players["me"] = new Player();
};

// Moves a player
// move = {playerId: id, x: Number, y: Number}
CastleWar.prototype.playerMove = function playerMove (move) {
	this.players[move.playerId].move(move);
};

// Moves the main player
// move = {x: Number, y: Number}
CastleWar.prototype.move = function (move) {
	this.players["me"].move(move);
};

// Lets the main player perform the action
// action = 'jump', 'moveleft', 'moveright', 'attack'
CastleWar.prototype.action = function (action) {
	this.players["me"].action(action);
};

/**
 * Event dispatcher
 * License mit
 * https://github.com/mrdoob/eventdispatcher.js
 * @author mrdoob / http://mrdoob.com/
 */

var EventDispatcher = function () {}

EventDispatcher.prototype = {

	constructor: EventDispatcher,

	apply: function ( object ) {
		object.addEventListener = EventDispatcher.prototype.addEventListener;
		object.hasEventListener = EventDispatcher.prototype.hasEventListener;
		object.removeEventListener = EventDispatcher.prototype.removeEventListener;
		object.dispatchEvent = EventDispatcher.prototype.dispatchEvent;
	},

	addEventListener: function ( type, listener ) {
		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;
		if ( listeners[ type ] === undefined ) listeners[ type ] = [];
		if ( listeners[ type ].indexOf( listener ) === - 1 ) listeners[ type ].push( listener );
	},

	hasEventListener: function ( type, listener ) {
		if ( this._listeners === undefined ) return false;
		var listeners = this._listeners;

		if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) return true;
		return false;
	},

	removeEventListener: function ( type, listener ) {
		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {
			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) listenerArray.splice( index, 1 );
		}

	},

	dispatchEvent: function ( event ) {
		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {
			event.target = this;

			var array = [];
			var length = listenerArray.length;

			for ( var i = 0; i < length; i ++ ) array[ i ] = listenerArray[ i ];
			for ( var i = 0; i < length; i ++ ) array[ i ].call( this, event );
		}
	}

};

EventDispatcher.prototype.apply(CastleWar.prototype);
function KeyboardController (castleWar) {
	this.castleWar = castleWar;

	// The actions that should be executed on keydown for that event.keyCode
	this.keyDownList = {
		37: ["moveleft"],
		38: ["jump"],
		39: ["moveright"],
		40: []
	};

	document.addEventListener("keydown", this.handleKeyDown.bind(this));
}

// Execute the keydown actions
KeyboardController.prototype.handleKeyDown = function handleKeyDown (event) {
	this.performActions(this.keyDownList[event.keyCode] || []);
};

// Executes the actions in the array
KeyboardController.prototype.performActions = function performActions (actions) {
	for (var k = 0; k < actions.length; k++) {
		this.actions[actions[k]].call(this);
	}
};

// Actions to perform
// this refers to KeyboardController when called from performActions
KeyboardController.prototype.actions = {};
KeyboardController.prototype.actions.moveleft = function moveleft () {
	this.castleWar.action("moveleft");
};

KeyboardController.prototype.actions.moveright = function moveright () {
	this.castleWar.action("moveright");
};

KeyboardController.prototype.actions.jump = function jump () {
	this.castleWar.action("jump");
};
function Network (server, castleWar) {
	this.castleWar = castleWar;
	this.socket = io(server);
	this.bindSocketHandlers();
	this.bindCastleWarHandlers();
}

/*
	Socket communicatione
*/

Network.prototype.bindSocketHandlers = function bindSocketHandlers () {
	this.socket.on("playerlist", this.setPlayerList.bind(this));
	this.socket.on("playerMove", this.playerMove.bind(this));
};

Network.prototype.setPlayerList = function setPlayerList (list) {
	this.castleWar.setPlayerList(list);
};

Network.prototype.playerMove = function playerMove (playerMove) {
	this.castleWar.playerMove(playerMove);
};

/*
	CastleWar Handlers
*/

Network.prototype.bindCastleWarHandlers = function bindCastleWarHandlers () {
	this.castleWar.addEventListener("playermove", function (move) {
		this.socket.emit("playermove", move);
	});	
};
function Player (propertys) {
	this.name = propertys.name || "Unnamed";
	this.x = propertys.x || 0;
	this.y = propertys.y || 0;
	this.health = (typeof propertys.health == "number") ? propertys.health : 100;
}

// Move the player
// move = {x: Number, y: Number}
Player.prototype.move = function move (move) {
	this.x = move.x;
	this.y = move.y;
};

// Perform the given action
// action = 'jump', 'moveleft', 'moveright', 'attack'
Player.prototype.action = function action () {

}
